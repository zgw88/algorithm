/**
 * computed 和 watch 是 Vue.js 中的两个常用响应式属性，它们都是用于监听数据变化并触发对应操作。
 * 下面分别介绍它们的实现原理：

1. computed

computed 属性是一个计算属性，它能够根据其他响应式属性进行计算，并返回结果。computed 
属性在初次访问时会进行缓存，只有当依赖的属性值发生变化时才会重新计算。

具体实现原理如下：

- 当 computed 属性被创建时，Vue.js 会为其创建一个 Watcher 实例，并将该实例添加到所有依赖项的 
Dep 对象中。

- 在 Watcher 的 get 方法中，首先检查当前 computed 是否已经存在缓存值。
如果存在，则直接返回该值；否则，调用用户定义的 getter 函数进行计算，并将结果保存在缓存中。

- 如果 computed 依赖的任何响应式属性发生变化，则 Watcher 的 update 方法会被触发，
从而重新计算 computed 并更新缓存值。

2. watch

watch 属性用于监听特定响应式属性或者表达式的变化，并且在变化后执行相应的回调函数。
与 computed 不同，watch 可以监听多个属性或者表达式，并且不会自动缓存计算结果具体实现原理如下：

- 当 watch 属性被创建时，Vue.js 会为其创建一个 Watcher 实例，并将该实例添加到所有依赖项的
 Dep 对象中。

- 在 Watcher 的 get 方法中，首先获取 watch 属性所依赖的属性或者表达式的值，
并保存在内部变量 value 中。

- 如果依赖项发生变化，则 Watcher 的 update 方法会被触发，
从而重新计算属性或者表达式的值并执行相应的回调函数。

总体来说，computed 和 watch 均是基于 Vue.js 的响应式原理实现的。
它们通过创建 Watcher 实例、依赖收集和触发更新等一系列步骤实现了对数据变化的监听和自动更新。
 */