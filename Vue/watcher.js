/**
 * 在 Vue.js 中，Watcher 是一个核心概念，用于监听数据变化并触发对应的回调函数。Watcher 的原理可以分为以下几个步骤：

1. Watcher 实例化：当创建一个响应式对象时，Vue.js 会创建一个 Dep 对象和一个 Watcher 对象。Dep 是依赖收集器，用于收集当前响应式对象所有相关的 Watcher 实例。Watcher 则是监听器，用于监听响应式对象属性的变化。

2. 收集依赖：当 Watcher 被实例化时，它会将自己添加到当前活动的 Dep 对象中去。这样，在执行完渲染函数后就能够知道当前响应式对象被访问了多少次，并且记录下来依赖关系。

3. 触发更新：当响应式对象中的数据发生改变时，就会触发该对象对应的 Dep 对象通知所有与之相关联的 Watcher 实例进行更新。

4. 执行回调函数：在更新过程中，每个 Watcher 实例都会执行自己绑定的回调函数来更新视图或其他相关操作。

需要注意的是，在第一次创建er 实例时，由于此时没有进行任何数据变更操作，所以 Watcher 并不会立即执行回调函数。只有在数据变更后才会触发对应的回调函数。

总体来说，Vue.js 的 Watcher 原理基于依赖收集和观察者模式，通过建立响应式对象、收集依赖关系、触发更新和执行回调函数等一系列步骤来实现数据的监听和自动更新。
 */

