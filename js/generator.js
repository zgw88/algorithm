/**
 * Generator函数通过生成器对象的迭代现中断和恢复的功能。以下是其工作原理：

1函数使用`function`关键字定义一个Generator函数。它在执行过程中可以被暂停和恢复。

2. 生成器对象：当调用Generator函数时，会返回一个生成器对象。这个对象包含一个`next()`方法和一个内部状态（保存了当前执行位置和变量值等）。

3. `next()`方法每次调用生成器对象的`next()`方法，都会使Generator函数执行一段代码，直到遇到`yield`表达式或函数结束。

4.yield`表达式：`yield`表达式用于指定生成器函数的中断点，并返回一个值给调用方。在每次调用`next()`时，代码执行到该`yield`表达式处就会暂停，并将结果传递用方。

5. 恢复操作：通过调用生成器对象的`next()`方法并传入参数，可以将值传递给一次暂停处的`yield`表达式，并继续从该点开始执行后面的代码。

6. 完成状态：当Generator函数执行完所有代码或遇到没有明确返回值的`return`语句时，生成器对象进入完成状态（: true）。

通过以上机制，Generator函数能够实现中断和恢复操作。每次调用生成器对象的`next()`方法时，它会从上一次暂停处继续执行到再次遇到`yield`表达式或函数结束。这种机制使得异步操作的流程控制更加灵活和可读。
 */